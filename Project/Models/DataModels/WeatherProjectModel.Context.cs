//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.Models.DataModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class UD12_ch222ih_WeatherEntities : DbContext
    {
        public UD12_ch222ih_WeatherEntities()
            : base("name=UD12_ch222ih_WeatherEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Forecast> Forecasts { get; set; }
        public DbSet<Location> Locations { get; set; }
    
        public virtual int DeleteForecast(Nullable<int> forecastId)
        {
            var forecastIdParameter = forecastId.HasValue ?
                new ObjectParameter("ForecastId", forecastId) :
                new ObjectParameter("ForecastId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteForecast", forecastIdParameter);
        }
    
        public virtual int DeleteLocation(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", locationIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertForecast(Nullable<int> locationId, Nullable<double> temperature, string description, string icon)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertForecast", locationIdParameter, temperatureParameter, descriptionParameter, iconParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertLocation(string address, Nullable<double> latitude, Nullable<double> longitude, Nullable<System.DateTime> nextUpdate, string city)
        {
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var nextUpdateParameter = nextUpdate.HasValue ?
                new ObjectParameter("NextUpdate", nextUpdate) :
                new ObjectParameter("NextUpdate", typeof(System.DateTime));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertLocation", addressParameter, latitudeParameter, longitudeParameter, nextUpdateParameter, cityParameter);
        }
    
        public virtual int UpdateForecast(Nullable<int> forecastId, Nullable<double> temperature, string description, string icon)
        {
            var forecastIdParameter = forecastId.HasValue ?
                new ObjectParameter("ForecastId", forecastId) :
                new ObjectParameter("ForecastId", typeof(int));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateForecast", forecastIdParameter, temperatureParameter, descriptionParameter, iconParameter);
        }
    
        public virtual int UpdateLocation(Nullable<int> locationId, string address, Nullable<double> latitude, Nullable<double> longitude, Nullable<System.DateTime> nextUpdate, string city)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var nextUpdateParameter = nextUpdate.HasValue ?
                new ObjectParameter("NextUpdate", nextUpdate) :
                new ObjectParameter("NextUpdate", typeof(System.DateTime));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocation", locationIdParameter, addressParameter, latitudeParameter, longitudeParameter, nextUpdateParameter, cityParameter);
        }
    }
}
